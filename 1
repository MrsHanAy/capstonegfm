if (!require("devtools")) install.packages("devtools")
devtools::install_github("Kohze/fireData", force = TRUE)
library(remotes)
library(pkg)
library(firebase)
library(fireData)
library(lubridate)
library(dplyr)
library(ggplot2)

# Function to process data
process_data <- function(data) {
  time_column <- as.POSIXct(names(unlist(data)), format = '%Y.%m.%d.%H:%M:%S')
  df <- read.csv(text = unname(unlist(data)), header = FALSE, sep = ';') |>
    setNames(c("T", "RH", "CO", "CO2", "CH2O", "O3", "NO2", "VOC", "PM1", "PM2.5", "PM10", "Battery"))
  df$Time <- as.Date(time_column)  # Extract only the date part
  df$hour <- format(time_column, "%H:%M:%S")
  df$one_hour_interval <- cut(time_column, breaks = "1 hours", labels = FALSE)
  df$one_hour_interval <- floor_date(time_column, "1 hours")
  return(df[order(df$Time), ])  # Order rows by Time
}
# Firebase configuration
api_key <- "AIzaSyA60Dr9Zi7hubjqtftPp0VI-Y0KVzs1m78"
db_url <- "https://pplh-ipb-default-rtdb.firebaseio.com"
project_id <- "pplh-ipb"
project_domain <- "pplh-ipb.firebaseapp.com"

# Download data
test1 <- download(projectURL = db_url, fileName = "data")

# Process data for N1, N3, and N5 and order by Time
N1 <- process_data(test1$N1)
filtering = N1 %>% filter(one_hour_interval > "2023-11-15 00:00:00")
N1_per_hour <- filtering %>% 
  group_by(one_hour_interval) %>%
  summarise(across(.cols = -c(Time, hour), .fns = mean))

##Ploting 

#suhu 
ggplot(N1_per_hour, aes(one_hour_interval,T))+geom_line(stat = 'identity', col='red')+theme_classic()+
  xlab("date")+ ylab('SuhuÂ Udara (degree Celcius)')

#Kelembaban udara 
ggplot(N1_per_hour, aes(one_hour_interval,RH))+geom_line(stat = 'identity', col='green')+theme_classic()+
  xlab("date")+ ylab('Kelembaban (%)')

#CO
ggplot(N1_per_hour, aes(one_hour_interval,CO))+geom_line(stat = 'identity', col='black')+theme_classic()+
  xlab("date")+ ylab('part per Million (ppm)')

#O3
ggplot(N1_per_hour, aes(one_hour_interval,O3))+geom_line(stat = 'identity', col='black')+theme_classic()+
  xlab("date")+ ylab('part per Million (ppm)')

#NO2
ggplot(N1_per_hour, aes(one_hour_interval,NO2))+geom_line(stat = 'identity', col='blue')+theme_classic()+
  xlab("date")+ ylab('part per Million (ppm)')

#VOC
ggplot(N1_per_hour, aes(one_hour_interval,VOC))+geom_line(stat = 'identity', col='blue')+theme_classic()+
  xlab("date")+ ylab('Grades')

#PM1
ggplot(N1_per_hour, aes(one_hour_interval,PM1))+geom_line(stat = 'identity', col='blue')+theme_classic()+
  xlab("date")+ ylab('mikro gram/m3')

#PM2.5 
ggplot(N1_per_hour, aes(one_hour_interval,PM2.5))+geom_line(stat = 'identity', col='blue')+theme_classic()+
  xlab("date")+ ylab('mikro gram/m3')

#PM10
ggplot(N1_per_hour, aes(one_hour_interval,PM10))+geom_line(stat = 'identity', col='blue')+theme_classic()+
  xlab("date")+ ylab('mikro gram/m3')


#plotly
install.packages("plotly")
library(plotly)
#suhu
plot_ly() %>% 
  add_lines(x = N1_per_hour$one_hour_interval, y = N1_per_hour$T, color = I("black"), name = "observed")
plot_ly(N1_per_hour, x = ~one_hour_interval, y = ~T, type = 'scatter', mode = 'lines')

plot_ly() %>%
  add_lines(N1_per_hour, x = N1_per_hour$one_hour_interval, y = N1_per_hour$T, color = I("black"), name = "observed")
